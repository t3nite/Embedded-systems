#include <zephyr/kernel.h>
#include <zephyr/sys/printk.h>
#include <zephyr/device.h>
#include <zephyr/drivers/gpio.h>

// Led pin configurations
static const struct gpio_dt_spec red = GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios);
static const struct gpio_dt_spec green = GPIO_DT_SPEC_GET(DT_ALIAS(led1), gpios);
static const struct gpio_dt_spec blue = GPIO_DT_SPEC_GET(DT_ALIAS(led2), gpios);

// Red led thread initialization
#define STACKSIZE 500
#define PRIORITY 5

// FSM states
typedef enum {
    STATE_RED,
    STATE_YELLOW,
    STATE_GREEN
} state_t;

static state_t state = STATE_RED;

void fsm_task(void *, void *, void*);
K_THREAD_DEFINE(fsm_thread, STACKSIZE, fsm_task, NULL, NULL, NULL, PRIORITY, 0, 0);

/*
void red_led_task(void *, void *, void*);
void green_led_task(void *, void *, void*);
void blue_led_task(void *, void *, void*);
void yellow_led_task(void *, void *, void*);

K_THREAD_DEFINE(red_thread,STACKSIZE,red_led_task,NULL,NULL,NULL,PRIORITY,0,0);
K_THREAD_DEFINE(green_thread,STACKSIZE,green_led_task,NULL,NULL,NULL,PRIORITY,0,0);
K_THREAD_DEFINE(blue_thread,STACKSIZE,blue_led_task,NULL,NULL,NULL,PRIORITY,0,0);
K_THREAD_DEFINE(yellow_thread,STACKSIZE,yellow_led_task,NULL,NULL,NULL,PRIORITY,0,0);
*/

// Main program
int main(void)
{
	init_led();
    return 0;
}

// Initialize leds
int  init_led() {
    int ret;

	// Led pin initialization for red, green, and blue
    ret = gpio_pin_configure_dt(&red, GPIO_OUTPUT_ACTIVE);
    if (ret < 0) {
        printk("Error: Red Led configure failed\n");
        return ret;
    }
    ret = gpio_pin_configure_dt(&green, GPIO_OUTPUT_ACTIVE);
    if (ret < 0) {
        printk("Error: Green Led configure failed\n");
        return ret;
    }
    ret = gpio_pin_configure_dt(&blue, GPIO_OUTPUT_ACTIVE);
    if (ret < 0) {
        printk("Error: Blue Led configure failed\n");
        return ret;
}

    // Set leds off
    gpio_pin_set_dt(&red,0);
    gpio_pin_set_dt(&green,0);
    gpio_pin_set_dt(&blue,0);

    printk("Leds initialized ok\n");
    return 0;
}

/*
// Task to handle red led
void red_led_task(void *, void *, void*) {
    printk("Red led thread started\n");
    while (true) {
        gpio_pin_set_dt(&red, 1);
        printk("Red on\n");
        k_sleep(K_SECONDS(1));
        gpio_pin_set_dt(&red, 0);
        printk("Red off\n");
        k_sleep(K_SECONDS(1));
    }
}

// Task to handle green led
void green_led_task(void *, void *, void*) {
    printk("Green led thread started\n");
    while (true) {
        gpio_pin_set_dt(&green, 1);
        printk("Green on\n");
        k_sleep(K_SECONDS(1));
        gpio_pin_set_dt(&green, 0);
        printk("Green off\n");
        k_sleep(K_SECONDS(1));
    }
}

// Keltainen led (punainen + vihreä yhtä aikaa)
void yellow_led_task(void *, void *, void*) {
    printk("yellow led thread started\n");
    while (true) {
        gpio_pin_set_dt(&red, 1);
        gpio_pin_set_dt(&green, 1);
        printk("Yellow on\n");
        k_sleep(K_SECONDS(1));
        gpio_pin_set_dt(&red, 0);
        gpio_pin_set_dt(&green, 0);
        printk("Yellow off\n");
        k_sleep(K_SECONDS(1));
    }
}

// Task to handle blue led
void blue_led_task(void *, void *, void*) {
    printk("Blue led thread started\n");
    while (true) {
        gpio_pin_set_dt(&blue, 1);
        printk("Blue on\n");
        k_sleep(K_SECONDS(1));
        gpio_pin_set_dt(&blue, 0);
        printk("Blue off\n");
        k_sleep(K_SECONDS(1));
    }
}
*/

// FSM thread
void fsm_task(void *, void *, void*) {
    printk("FSM thread started\n");

    while (1) {
        switch (state) {
            case STATE_RED:
                gpio_pin_set_dt(&red, 1);
                gpio_pin_set_dt(&green, 0);
                printk("RED\n");
                k_sleep(K_SECONDS(1));
                state = STATE_YELLOW;
                break;

            case STATE_YELLOW:
                gpio_pin_set_dt(&red, 1);
                gpio_pin_set_dt(&green, 1);  // punainen + vihreä = keltainen
                printk("YELLOW\n");
                k_sleep(K_SECONDS(1));
                state = STATE_GREEN;
                break;

            case STATE_GREEN:
                gpio_pin_set_dt(&red, 0);
                gpio_pin_set_dt(&green, 1);
                printk("GREEN\n");
                k_sleep(K_SECONDS(1));
                state = STATE_RED;
                break;
        }
    }
}
