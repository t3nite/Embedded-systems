#include <gtest/gtest.h>
#include "../TimeParser.h"

// Test suite: TimeParserTest
TEST(TimeParserTest, TestCaseCorrectTime) {

    // Note that this test fails on purpose!!

    char time_test[] = "141205";
    ASSERT_EQ(time_parse(time_test),0);
}

// Correct times
TEST(TimeParserTest, CorrectTime) {
    char time1[] = "141205"; // 12 min 5 s
    ASSERT_EQ(time_parse(time1), 12*60 + 5);

    char time2[] = "000000"; // 0 min 0 s
    ASSERT_EQ(time_parse(time2), 0);

    char time3[] = "235959"; // 59 min 59 s
    ASSERT_EQ(time_parse(time3), 59*60 + 59);

    char time4[] = "121530"; // 15 min 30 s
    ASSERT_EQ(time_parse(time4), 15*60 + 30);
}

// Invalid times: out of range
TEST(TimeParserTest, InvalidTimeValues) {
    char invalid_hour[] = "240000";   // hour > 23
    ASSERT_EQ(time_parse(invalid_hour), TIME_VALUE_ERROR);

    char invalid_minute[] = "126000"; // minute > 59
    ASSERT_EQ(time_parse(invalid_minute), TIME_VALUE_ERROR);

    char invalid_second[] = "123060"; // second > 59
    ASSERT_EQ(time_parse(invalid_second), TIME_VALUE_ERROR);

    char invalid_time[] = "256061";   // kaikki yli
    ASSERT_EQ(time_parse(invalid_time), TIME_VALUE_ERROR);
}

// Null or empty string
TEST(TimeParserTest, NullOrEmptyTime) {
    ASSERT_EQ(time_parse(nullptr), TIME_ARRAY_ERROR);
    char empty_time[] = "";
    ASSERT_EQ(time_parse(empty_time), TIME_ARRAY_ERROR);
}

// Invalid length
TEST(TimeParserTest, InvalidLength) {
    char short_time[] = "12345";
    char long_time[]  = "1234567";
    ASSERT_EQ(time_parse(short_time), TIME_LEN_ERROR);
    ASSERT_EQ(time_parse(long_time), TIME_LEN_ERROR);
}

// Non-numeric characters
TEST(TimeParserTest, NonNumericTime) {
    char non_numeric1[] = "12AB34";
    char non_numeric2[] = "HHMMSS";
    char non_numeric3[] = "12 345";
    ASSERT_EQ(time_parse(non_numeric1), TIME_VALUE_ERROR);
    ASSERT_EQ(time_parse(non_numeric2), TIME_VALUE_ERROR);
    ASSERT_EQ(time_parse(non_numeric3), TIME_VALUE_ERROR);
}

// https://google.github.io/googletest/reference/testing.html
// https://google.github.io/googletest/reference/assertions.html
